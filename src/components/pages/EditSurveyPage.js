import React, { useState, useEffect } from 'react';
import apiClient from '../apiContent/apiClient';
import { useParams, useNavigate } from 'react-router-dom';
import './create.css';

const EditSurveyPage = () => {
  const { id } = useParams(); // ID –∞–Ω–∫–µ—Ç—ã
  const navigate = useNavigate();
  const [questions, setQuestions] = useState([]); // –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
  const [title, setTitle] = useState(''); // –ù–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã
  const [dropdownsOpen, setDropdownsOpen] = useState({}); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–ø–∞–¥–∞—é—â–∏—Ö —Å–ø–∏—Å–∫–æ–≤
  const [deletedQuestions, setDeletedQuestions] = useState([]); // –°–ø–∏—Å–æ–∫ ID —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤

  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Ç–∏–ø–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤
  const options = ["–û—Ç–∫—Ä—ã—Ç—ã–π", "–ó–∞–∫—Ä—ã—Ç—ã–π", "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä", "–®–∫–∞–ª–∞"];

  // –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ —á–∏—Å–ª–æ–≤—ã–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
  const questionTypeMapping = {
    "–û—Ç–∫—Ä—ã—Ç—ã–π": 1,
    "–ó–∞–∫—Ä—ã—Ç—ã–π": 2,
    "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä": 3,
    "–®–∫–∞–ª–∞": 4
  };

  // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
  const getQuestionTypeText = (id) => {
    switch (id) {
      case 1: return "–û—Ç–∫—Ä—ã—Ç—ã–π";
      case 2: return "–ó–∞–∫—Ä—ã—Ç—ã–π";
      case 3: return "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä";
      case 4: return "–®–∫–∞–ª–∞";
      default: return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π";
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç—ã
  useEffect(() => {
    if (id) {
      fetchQuestionnaire(id);
    }
  }, [id]);

  const fetchQuestionnaire = async (questionnaireId) => {
    try {
      const response = await apiClient.get(`/questionnaire/${questionnaireId}`);
      console.log("Fetched questionnaire data:", response.data);
      const data = response.data;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
      if (!data || !data.questions) {
        throw new Error("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'questions'.");
      }
      if (!Array.isArray(data.questions)) {
        throw new Error("–ü–æ–ª–µ 'questions' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º.");
      }

      // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥ –æ–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
      const { title, questions } = data;
      const processedQuestions = questions.map((q) => ({
        id: q.id, // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç id, –∞ –Ω–µ Id
        type: getQuestionTypeText(q.questionTypeId), // –ò—Å–ø–æ–ª—å–∑—É–µ–º questionTypeId
        text: q.text || "",
        answers: q.options?.map((o) => ({
          id: o.id, // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç id, –∞ –Ω–µ Id
          text: o.optionText || ""
        })) || [],
      }));

      setTitle(title);
      setQuestions(processedQuestions);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–Ω–∫–µ—Ç—ã:', error.response?.data || error.message);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–Ω–∫–µ—Ç—É.');
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const handleSave = async () => {
    try {
      if (!title) {
        alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã.');
        return;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã
      await apiClient.put(`/questionnaire/${id}/title`, { NewTitle: title });

      // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
      for (const question of questions) {
        if (question.isNew) {
          await createNewQuestion(parseInt(id), question);
        }
      }

      // –ó–∞—Ç–µ–º –æ–±–Ω–æ–≤–ª—è–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
      for (const question of questions) {
        if (question.id && question.id > 0) {
          await updateQuestion(parseInt(id), question);
        }
      }

      // –£–¥–∞–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã
      for (const deletedQuestionId of deletedQuestions) {
        await apiClient.delete(`/questionnaire/${id}/questions/${deletedQuestionId}`);
      }

      // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
      setDeletedQuestions([]);

      alert('–ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã:', error.response?.data || error.message);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã.');
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
  const createNewQuestion = async (questionnaireId, question) => {
    try {
      const response = await apiClient.post(`/questionnaire/${questionnaireId}/questions/add-question`, {
        Text: question.text,
        QuestionType: questionTypeMapping[question.type],
        Options: question.answers?.map(a => a.text) || []
      });

      const newQuestionId = response.data.questionId; // API –≤–µ—Ä–Ω—É–ª ID

      setQuestions(prevQuestions =>
        prevQuestions.map(q =>
          q.tempId === question.tempId
            ? { ...q, id: newQuestionId, tempId: undefined, isNew: false }
            : q
        )
      );

      console.log(`‚úÖ –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω: ID = ${newQuestionId}`);
    } catch (error) {
      console.error('üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:', error.response?.data || error.message);
      throw error;
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
  const updateQuestion = async (questionnaireId, question) => {
    if (!question.id || question.id < 1) {
      console.warn(`–ü—Ä–æ–ø—É—â–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞: ${question.text} (ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)`);
      return;
    }
  
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
      await apiClient.put(`/questionnaire/${questionnaireId}/questions/${question.id}/text`, {
        NewText: question.text
      });
  
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞
      await apiClient.put(`/questionnaire/${questionnaireId}/questions/${question.id}/type`, {
        NewQuestionType: questionTypeMapping[question.type]
      });
  
      // –ï—Å–ª–∏ –µ—Å—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤, –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Ö
      if (["–ó–∞–∫—Ä—ã—Ç—ã–π", "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä"].includes(question.type)) {
        for (const answer of question.answers) {
          if (answer.isNew) {
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞
            await apiClient.post(`/questionnaire/${questionnaireId}/questions/${question.id}/options`, {
              OptionText: answer.text
            });
          } else {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞
            await apiClient.put(`/questionnaire/${questionnaireId}/questions/${question.id}/options/${answer.id}`, {
              NewOptionText: answer.text
            });
          }
        }
      }
  
      console.log(`‚úÖ –í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω: ID = ${question.id}`);
    } catch (error) {
      console.error(`üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞ ${question.id}:`, error.response?.data || error.message);
      throw error;
    }
  };

  // const addNewQuestion = () => {
  //   const newQuestion = {
  //     tempId: Date.now(), // –í—Ä–µ–º–µ–Ω–Ω—ã–π ID –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
  //     isNew: true,
  //     type: "–û—Ç–∫—Ä—ã—Ç—ã–π",
  //     text: "",
  //     answers: []
  //   };
  //   setQuestions(prevQuestions => [...prevQuestions, newQuestion]);
  // };

  const addNewQuestion = async () => {
    try {
      // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
      const response = await apiClient.post(`/questionnaire/${id}/questions/add-question`, {
        Text: "", // –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        QuestionType: questionTypeMapping["–û—Ç–∫—Ä—ã—Ç—ã–π"], // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–∏–ø "–û—Ç–∫—Ä—ã—Ç—ã–π"
        Options: [] // –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
      });
  
      const newQuestionId = response.data.questionId; // –ü–æ–ª—É—á–∞–µ–º ID –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
  
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      const newQuestion = {
        id: newQuestionId,
        type: "–û—Ç–∫—Ä—ã—Ç—ã–π",
        text: "",
        answers: []
      };
  
      setQuestions(prevQuestions => [...prevQuestions, newQuestion]);
  
      console.log(`‚úÖ –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω: ID = ${newQuestionId}`);
    } catch (error) {
      console.error('üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:', error.response?.data || error.message);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å.');
    }
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
  const deleteQuestion = (questionId) => {
    // –£–¥–∞–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
    const updatedQuestions = questions.filter(q => q.id !== questionId);
    setQuestions(updatedQuestions);

    // –î–æ–±–∞–≤–ª—è–µ–º ID —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    if (questionId > 0) {
      setDeletedQuestions([...deletedQuestions, questionId]);
    }
  };

  // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞
  const handleOptionSelect = (id, option) => {
    setQuestions(questions.map(q =>
      q.id === id ? { ...q, type: option } : q
    ));
    setDropdownsOpen({ ...dropdownsOpen, [id]: false });
  };

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
  // const addAnswer = (questionId) => {
  //   setQuestions(questions.map(q => {
  //     if (q.id === questionId) {
  //       const newAnswer = { id: Date.now(), text: "" }; // –í—Ä–µ–º–µ–Ω–Ω—ã–π ID –¥–ª—è –Ω–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
  //       return { ...q, answers: [...(q.answers || []), newAnswer] };
  //     }
  //     return q;
  //   }));
  // };
  const addAnswer = async (questionId) => {
    try {
      // –ù–∞—Ö–æ–¥–∏–º –≤–æ–ø—Ä–æ—Å, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
      const question = questions.find(q => q.id === questionId);
      if (!question) {
        console.error(`–í–æ–ø—Ä–æ—Å —Å ID ${questionId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
        return;
      }
  
      // –°–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
      const response = await apiClient.post(`/questionnaire/${id}/questions/${questionId}/options`, {
        OptionText: "" // –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞
      });
  
      const newOptionId = response.data.optionId; // –ü–æ–ª—É—á–∞–µ–º ID –Ω–æ–≤–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞
      const newAnswer = { id: newOptionId, text: "" }; // –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –Ω–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
  
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤
      setQuestions(prevQuestions =>
        prevQuestions.map(q =>
          q.id === questionId
            ? { ...q, answers: [...(q.answers || []), newAnswer] }
            : q
        )
      );
  
      console.log(`‚úÖ –ù–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω: ID = ${newOptionId}`);
    } catch (error) {
      console.error('üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞:', error.response?.data || error.message);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞.');
    }
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
  // const deleteAnswer = (questionId) => {
  //   setQuestions(questions.map(q => {
  //     if (q.id === questionId) {
  //       return { ...q, answers: q.answers.length > 0 ? q.answers.slice(0, -1) : [] };
  //     }
  //     return q;
  //   }));
  // };

  const deleteAnswer = async (questionId, answerId) => {
    try {
      // –£–¥–∞–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
      await apiClient.delete(`/questionnaire/${id}/questions/${questionId}/options/${answerId}`);
  
      // –£–¥–∞–ª—è–µ–º –æ—Ç–≤–µ—Ç –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      setQuestions(prevQuestions =>
        prevQuestions.map(q =>
          q.id === questionId
            ? { ...q, answers: q.answers.filter(a => a.id !== answerId) }
            : q
        )
      );
  
      console.log(`‚úÖ –í–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ —É–¥–∞–ª–µ–Ω: ID = ${answerId}`);
    } catch (error) {
      console.error('üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞:', error.response?.data || error.message);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞.');
    }
  };

  return (
    <div className="survey-page">
      <div className="survey-title">
        <span>–ù–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã</span>
        <input
          type="text"
          placeholder="–Ω–∞–∑–≤–∞–Ω–∏–µ"
          value={title}
          onChange={(e) => setTitle(e.target.value)}
        />
      </div>
      {questions.map((question, index) => (
        <div key={question.id || `temp-${index}-${Date.now()}`} className="question-container">
          <div className="question">
            –¢–∏–ø –≤–æ–ø—Ä–æ—Å–∞
            <div className="dropdown">
              <div
                className="punkt"
                onClick={() =>
                  setDropdownsOpen({
                    ...dropdownsOpen,
                    [question.id]: !dropdownsOpen[question.id],
                  })
                }
              >
                <div className={`punktGalka ${dropdownsOpen[question.id] ? 'rotate' : ''}`}></div>
              </div>
              {dropdownsOpen[question.id] && (
                <ul className="dropdown-menu">
                  {options.map((option) => (
                    <li
                      key={option}
                      onClick={() => handleOptionSelect(question.id, option)}
                      className="dropdown-item"
                    >
                      {option}
                    </li>
                  ))}
                </ul>
              )}
            </div>
            <div className="numberQuestion">
              –í–æ–ø—Ä–æ—Å {question.id}: {question.type}
            </div>
            <input
              type="text"
              placeholder="–≤–æ–ø—Ä–æ—Å"
              value={question.text}
              onChange={(e) => setQuestions(prevQuestions =>
                prevQuestions.map(q =>
                  q.id === question.id ? { ...q, text: e.target.value } : q
                )
              )}
            />
            {["–ó–∞–∫—Ä—ã—Ç—ã–π", "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä"].includes(question.type) && (
              <div>
                {question.answers.map((answer) => (
                  <div key={answer.id} className="answer-container">
                    <input
                      type="text"
                      placeholder="–æ—Ç–≤–µ—Ç"
                      value={answer.text}
                      onChange={(e) => setQuestions(prevQuestions =>
                        prevQuestions.map(q =>
                          q.id === question.id ? {
                            ...q,
                            answers: q.answers.map(a =>
                              a.id === answer.id ? { ...a, text: e.target.value } : a
                            ),
                          } : q
                        )
                      )}
                    />
                  </div>
                ))}
                <button
                  className="add-button"
                  onClick={() => addAnswer(question.id)}
                >
                  –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç
                </button>
                {question.answers.length > 0 && (
                  <button
                    className="delete-button"
                    onClick={() => deleteAnswer(question.id)}
                  >
                    —É–¥–∞–ª–∏—Ç—å –æ—Ç–≤–µ—Ç
                  </button>
                )}
              </div>
            )}
          </div>
          <div className="action">
            <div className="newBlock" onClick={() => addNewQuestion()}>
              –Ω–æ–≤—ã–π –±–ª–æ–∫
            </div>
            <div className="trash" onClick={() => deleteQuestion(question.id)}>
              —É–¥–∞–ª–∏—Ç—å
            </div>
          </div>
        </div>
      ))}
      <div className="ButtonSaveContainer">
        <button onClick={handleSave} className="ButtonSave">
          –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
        </button>
      </div>
    </div>
  );
};

export default EditSurveyPage;